SpringBoot & MicroServices
==========================


Pre-Requisites
--------------
Core Java

Adv Java (Jdbc, Servlets, Jsp, JSTL)

Hibernate (ORM)

Spring (Core)


SpringBoot
----------
Spring vs SpringBoot
SpringBoot Advantages
IOC Container
Stereotype annotations
Auto Configuration
Starter POM
Standalone application development using SpringBoot
Introduction to Spring MVC
Spring MVC Architecture
Embedded Servers in SpringBoot
Webapp development using SpringBoot
application.properties file
application.yml file
Boot application deployment in third party server
SpringBoot profiles
SpringBoot Actuators
Exception Handling in SpringBoot
Logging in SpringBoot (SLF4j, Log4j, Logback, MDC)
TheamLeaf in SpringBoot
Apache Kafka


JAX-RS (JAVA API FOR XML RESTFUL SERVICE)

From Spring 3.0v we have support to develop rest application using spring.

Spring with Rest
----------------
SOAP vs REST
Rest Architecture Principles -- Roy Fielding
XML, XSD and JAX-B
JSON, JsonSchema and Jackson
HTTP Methods
HTTP Status Codes & messages
REST API Development
REST Client Development(RestTemplate, WebClient)
Swagger
Asynchronus Communication Services (Reactive Programming)
Exception Handling in REST API (ExceptionMapper)
SOAP UI & POSTMAN
Securying REST API(BasicAuth & OAuth2.0)


SpringData
----------
Introduction to SpringData
Introduction to SpringData Starter POM
DataSource Configuration
CRUDRepository
JpaRepository
Custom Queries execution using @Query annotation
Sorting
Pagination




MicroServices
-------------
What is Monolithic Architecture
What is Load Balancer (Cluster) - LBR
What is MicroService Architecture
Advantages of MicroServices
Service Registry(Netflix server)
Gateway Service (Zuul proxy server)
MicroServices Intercommunication (FiegnClient)
Microservice deployment in Pivotal Cloud Foundry
MicroService deployment in AWS
Ribbon (Load Balancer)
Circuit Breaker (Hystrix)
Docker (Orchestration) | Kubernetes
Microservice application monitoring(JMETER)


Tools
------
Maven
Log4J
Junit & PowerMock
Jenkins (CI & CD)

Duration: 45-60 days
Timings: 9:00 AM - 10:30 AM (Monday-Monday)
No class notes

Facebook Group : TEK Leads
email id : tekleads4u@gmail.com or ashok@nareshit.com


3 expereience (Boot & MicroService)


Service based company - Accenture, Deloitte, TCS, Infy, TechM..
--------------------------------------------------------------
years of experience * 3 lakhs

3*3=9 lakhs

Product based company- Oracle, DeShaw, Pramati, JpMorgan etcc
-----------------------------------------------------
years of experience * 4 lakhs

3 * 4 = 12 lakhs

Note: DS, Algos, DP, System Design are very imp
	(www.geeksforgeeks.com)




Spring
------
It is an opensource application development framework
Pivotal team
Latest version of spring is 5.x (Reactive Programming-webflux)


Spring is mainely using to develop below 3 types of applications
-----------------------------------------------------
Web applications (C 2 B)
Distributed applications (B 2 B)
MicroService applications (B 2 B)


Spring Core
Spring AOP
Spring MVC & Spring Rest
Spring Data

SpringBoot
--------------------
Spring is framework

SpringBoot is an approach to develop spring applications with minimal or less configuration.

Spring Boot Provided Starter Pom (Simplifying maven dependencies)

Spring Boot Provided Http Embedded Servers (Tomcat , Jetty, netty)

SpringBoot works based on Opinionated Configuration

SpringBoot supports Auto Configuration

SpringBoot supports Profiles (env specific configuration)

SpringBoot supports Actuators (Production Ready Features)

SpringBoot = Spring + Embedded Servers - xml or annotation config

Dis-Advantages of SpringBoot
----------------------------
Migrating spring project to spring boot will be very difficult

It is recommended for scratch development project

Un-necessary dependencies will be downloaded from starter pom. Manually we need to exclude them.

Creating SpringBoot Application
-------------------------------
1) Spring Starter Wizard in STS IDE

2) Spring initializer website ( start.spring.io )

3) CLI

4) Maven project


pom.xml
-------
spring-boot-starter-parent (version number) -- 2.2.0

spring-boot-starter (packaging type is jar)- standalone

spring-boot-starter-test --- unit testing (junit)


Note : If we are not using any dependency then it is recommended to exclude that from build path.

Note: Project specific dependencies we should add manually in pom.xml file.

ex : jdbc-driver, lombok, kaptcha etc.....

------------------------------------
Main class in springboot application
------------------------------------
package com.example.demo;

@SpringBootApplication
public class SpringBootApp1Application{

     public static void main(String... args){
	 SpringApplication.run								(SpringBootApp1Application.class,args);
     }
}
-----------------------------------------------------------

spring-boot-starter (standalone) 

spring-boot-starter-web  (web)

spring-boot-starter-webflux (reactive)







18-10-2019
-----------
-> Spring Starter Wizard in STS

-> Create project from start.spring.io website
	-> download project zip file
	-> import project into IDE

pom.xml
-------
-> spring-boot-starter-parent
-> spring-boot-starter (standalone) - packaging - jar
-> spring-boot-starter-test

main class
----------

package com.nit;

@SpringBootApplication
public class SpringBootApplication{
	public static void main(String... args){
		SpringApplication.run(Class, args);
	}
}

com.nit.service
com.nit.controller
com.nit.dao
com.util.nit

-> Starts StopWatch

-> Which is profile is activated (to load properties)

-> Type of application (web | reactive | default)
	
-> Starts IOC Container

-> ClassPath Scan (to identify spring beans)

-> Bean Objects creation & dependency injection

-> Calculate time taken to start application and print it

-> Return IOC Container reference


properties file
---------------
application.properties or application.yml



presentation


web layer ==> (com.ibm.dbs.admin.controller)
business layer ==> (com.ibm.dbs.admin.service)
persistence layer ==> (com.ibm.dbs.admin.repository)

base package ===== > com.ibm.dbs



21-Oct-19
------------

Stereotype annotations
----------------------
@Component
@Service
@Repository

@Controller (C 2 B)-- Spring 3.0 
@RestController  (B 2 B) -- Spring 4.0

@Configuration

@Bean (Method level)





22-Oct-19
---------
Beans Colloboration
-------------------

SI : Injecting dependent object into target object by calling target class exposed setter method.

public class ContactController{
	
	private ContactService contactService;

	public void setContactService(Contactservice cs){
		this.contactService  = cs;
	}

	//methods

}

<bean id="controller" class="pkg.ContactController">
    <property name="contactService" ref="cs"/>
</bean>
----------------------------------------------------------------

CI: Injecting dependent bean into target objan ect by calling target bean constructor.

public class ContactController{
	
	private ContactService contactService;

	public ContactController(ContactService cs){
		this.contactService = cs;
	}

	//methods

}
<bean id="controller" class="pkg.ContactController">
    <constructor-arg name="contactService" ref="cs"/>
</bean>
----------------------------------------------------------------

@Autowired
----------

byName
byType
constructor (internally byType mode will be used)


When we use this Annotation, internally spring uses AutowiredAnnotationBeanPostProcessor.


This annotation we can use at below 3 levels

1) field

2) setter method

3) constructor (if we have only one parameterized constructor with beans as parameters @Autowired is optional)


@Controller
public class ContactController{
		
	@Autowired
	private ContactService contactService;

}


@Primary : 
----------
If we have multiple beans qualified for Autowiring then to choose one bean we can use @Primary annotation. 

The bean which contains @Primary will be considered for Autowiring.

@Qualifier :
------------
If we want to inject dependent object based on name of the bean then we can use @Qualifier annotation.

Note: We can use @Primary & @Qualifier only in Autowiring in situation.


public String toString(){

return  
this.getClass().getName()+"@"+Integer.toHexString(this.hashCode());
	
}





SpringApplication.run(..)
@SpringBootApplication
How IOC will start in SpringBoot
ComponentScan
Stereotype annotation
Base Package Naming Convention
Bean Colloboration (Autowiring)



24-Oct-2019
------------
SpringBoot Web Application Creation
-----------------------------------

spring-boot-starter-web
	 - Spring MVC 
	 - Restful App
	 - Embedded Tomcat Container

Note: When we run this SB web application it Starts IOC container by using WebApplicationContext.

It tries to start Tomcat Server with 8080 as port number.

Note: We can change Embedded Server Port Number in 

application.properties
-----------------------
server.port=9090

application.yml
---------------
server: 
 port: 9090


YAML : Yet Another Markup Language

Note: Indent spaces plays very important in yml file

In SpringBoot web application context-path is empty by default.

Note: We can specifiy context-path in properties file or yml file

application.properties
-----------------------
server.servlet.context-path=/App


application.yml
---------------
server: 
  servlet: 
     context-path: /App


With Context-Path : http://localhost:7070/App/welcome
Without Context-Path : http://localhost:7070/welcome

Note: 
-----
Context Path should start with '/' and should not end with '/'

If we have spring-boot-starter-web then by default we will get 
Embedded Tomcat container.

If we don't want to use Embedded Tomcat container we should remove that from build path.

To remove dependency in maven we can use exclusions option


Making Jetty Serve as default embedded server
---------------------------------------------
1) Exclude starter-tomcat from spring-boot-starter-web

2) Add Jetty starter dependency in pom.xml


Deploying SpringBoot Webapplication in External Tomcat server
-------------------------------------------------------------
1) Specify embedded server scope as 'provided' in pom.xml
2) Add <start-class> in <properties /> section of pom.xml

RestAPI
-------
1) SOAP vs REST
2) Rest Architecture Principles
3) RestController
4) Http Annotations 	
	 - @GetMapping
 	 - @PostMapping
	 - @PutMapping
         - @DeleteMapping
5) @RequestBody & @ResponseBody
6) @RequestParam & @PathParam
7) Consumes
8) Produces
9) Content-Type & Accept headers
10) POSTMAN
11) Basic Authentication
12) XML & JAX-B
13) JSON & Jackson
14) Swagger
15) Exception Handling
16) Rest Client Development (RestTemplate & WebClient)


SOAP Webservices
----------------
Provider : Application which is providing services

Consumer : Application which is accessing services

WSDL : Webservice description language (xml)

SOAP : Simple Object Access Protocol (xml)

SOAP UI : Provider functionality testing tool


Note: Webservices is the first technology which supported for Distributed application development with Intereoperability.

Roy fielding identified some loop holes available in SOAP Based Services. They are below
----------------------------------------------------------------
1) Always we should exchange data in soap xml format only
	(Real intereoperability is not available)

2) Everybody can't access soap webservices
     (Real adoptability is not available)


To avoid problems with SOAP development Roy Fielding Provided Rest Architecture principles

1) Unique Addressbility

2) Uniform Constraint Interfaces

3) Message Oriented Representation

4) Communication Stateless

5) HATEOS


JAX-RS API (java api for xml - Restful services)

	- Jersey (Sun)
	- Rest Easy (Jboss)

Spring also supporting for Restful services development from Spring 3.0 version onwards.

	
3.0 =====> @Controller + @ResponseBody

4.0 ===> @RestController


Unique Addressability
--------------------
Every distributed component should bind to unique address.

Note: Class level & method level address mapping.


Uniform Constraint interfaces
-----------------------------
To achieve easy adoptability we should bind our rest controller method to HTTP methods

GET method ----> @GetMapping

POST method ---> @PostMapping

PUT method ----> @PutMapping

DELETE method ---> @DeleteMapping

Message Oriented Representation
--------------------------------
Rest api supports for multiple data formats

Ex: xml, json, yml, text, html etc....


Communication Stateless
-----------------------
In Rest api communication, every client request will be considered as new request. Nothing will be stored at server.

HATEOS
------
Hypermedia as an engine for application state




Working with JSON
-----------------
JSON - Java Script Object Notation

JSON is platform independent & language independent

JSON is light weight when compared with XML

JSON represents data in key-value format


To work with JSON data in Java applications we can use below apis
------------------------------------------------------------------
1) Jackson
2) Gson

Jackson API
-----------
ObjectMapper mapper = new ObjectMapper();
 
//converting java obj to json data
String personJson = mapper.writeValueAsString(personObj);

//converting json data to java obj
Person p = mapper.readValue(personJson,Person.class);

Gson API
--------
Gson gson = new Gson();

//convert java obj to json
String personJson = gson.toJson(personObj);

//convert json to java object
Person p = gson.fromJson(personJson,Person.class);


RestController with Json Data
-----------------------------
@RestController ---> Class will become distributed component

@GetMapping --> To bind method to HTTP GET request

GET : If server wants to send data to client then use GET request method (client will send GET request to get the data)

-> GET request will not contain body
------------------------------------------------------------


@PostMapping --> To bind method to HTTP Post request

POST : If server wants to recieve the data to create new record then use POST request method (Client will send data in POST request body).

-> POST request will contain body


Consumes & Produces
-------------------
Consumes represents in which format rest api method can recieve the data

Produces represents in which format rest api method can provide the response

Note: one method can support for multiple consume and produces formats.

GET request with Produces syntax
--------------------------------

@GetMapping(
	value="/getCustomer",
	produces={
		"application/json"
	}
)
public Customer getCustomer(){
	//logic
	return customerObj;
}

Note: When client sending GET request to above method he should send
Accept header.

syntax : Accept=application/json

Note: Accept header represents client expecting response format from server.

POST Request method with JSON
-----------------------------
@PostMapping(
	value="/addCustomer",
	consumes= {
		"application/json"
	}
)
public String addCustomer(@RequestBody Customer c){
	//logic
	return "Success";
}

When Client is sending POST request with data in request body, he should send one header called 'Content-Type'

Content-Type header represents in which format client is sending data to server in request body.

Syntax: Content-Type=application/json


Rest API Testing Tools
-----------------------
1) SOAP UI

2) POSTMAN

3) Swagger UI


JAX-B API
---------
Java Architecture For XML Binding. This api is used to convert java object to xml data and vice versa.


XML
XSD
One Time Operation
Runtime Operations
	- Marshalling
	- Un-Marshalling


XML
---
XML stands for extensible markup language

XML provided by w3c org

Initial version of xml is 1.0 and current version of xml is also 1.0

XML is platform independent and language independent

XMl is intereoperable

People will use xml to represent the data and to transfer the data

Sample
------
<?xml version="1.0" encoding="UTF-8"?>
<person id="101">
   <first-name>Cedrone</first-name>
   <last-name>Charles</last-name>
</person>

Simple Element : The element which contains data 

	Ex : first-name & last-name

Compound Element : The element which contains child element(s)

	Ex : person

Attribute : To store supplement information

	Ex :  id


Xml is used to store the data

XSD is used to represent structure of the xml


One Time Operation
------------------
Creating binding classes is called One Time Operation

Note: If we have XSD, then we can create binding classes for that XSD using XJC compiler.

Once we have binding classes then we can perform Runtime Operations
--------------------------------------------------------------------
1) Marshalling

2) Un-Marshalling


Note: Without having binding classes we can't perform Runtime operations.

Marshalling
-----------
The process of converting java object to xml data

	JAXBContext ctxt = JAXBContext.newInstance(Customer.class);
	
	Marshaller marshaller = ctxt.createMarshaller();
	
	marshaller.marshall(customerObj, System.out);


Un-Marshalling
--------------
The process of converting xml data to java object

	JAXBContext ctxt = JAXBContext.newInstance(Customer.class);
	
	UnMarshaller unmarshaller = ctxt.createUnMarshaller ( );

	File f = new File("customer.xml");

	Customer c  = (Customer) unmarshaller.unmarshall(f);


Note: Marshalling & Un-Marshalling we can perform only on binding objects.



Query Paramter
--------------
->Query Parameters are used in url to send data to server

-> Query parameters will be available in key-value format

	Ex:  ?id=101

-> Query Parameter will start with question mark (?) symbol

Note: Query parameter always should be at end of the url

-> If we want to send more than one query parameter then we should use & operator


To recieve query parameter we will write below piece of code in JEE
-------------------------------------------------------------------
String id = request.getParameter("id");
Integer cid = Integer.parseInt(id);


To represent query parameters in Spring Rest Controller we will use
@RequestParam("key") annotation


public Customer getCustomer(@RequestParam("id") Integer cid) {
		//logic
		return c;
}



Path Parameter
---------------
-> Path Parameters are used to send data to server in URL directly

-> To recieve PathParameters we can use @PathVariable annotation

@GetMapping(value="/getCustomer/{id}",produces="xml/json")
public Customer getCustomer(@PathVariable("id") Integer cid){
		//logic
		return c;
}



Http Status Codes
-----------------
200-299  : OK (success)

300-399 : Redirect

400-499 : Client problem

500-599 : Internal Server Problem


Exception Handling in Rest API
------------------------------
We can handle exceptions in 2 ways

1) Local Exception Handling (Controller specific)

2) Global Exception Handling (Entire application)


@ExceptionHandler(CustomerNotFoundException.class)
public ResponseEntity<String> handleCNFException(){

	ResponseEntity<String> re = 
		new ResponseEntity("Invalid ID",400);

}



Difference between WSDL and WADL
---------------------------------
-> WSDL stands for Webservices description language

-> WSDL contains details of provider

-> WSDL is mandatory for SOAP based webservices

-> Using WSDL consumer will understand provider

-> WADL stands for Webapplication Description Language

-> WADL provides webapplication documentation

-> Rest API also can be described by using WADL

-> WADL demand is very less in industry because of Swagger

-> Swagger is used to generate documentation for Rest API

-> Swagger UI can be used to test Rest api


What is Swagger
---------------
Swagger is a custom documentation plugin which is used to generate documentation for web application.

In Industry people are using Swagger mainely to describe only 
Rest API.


Adding to Swagger to Project
-------------------------------

1) Add swagger dependencies to project pom.xml

		1) swagger documentation
		2) swagger ui


2) Create SwaggerConfiguration class using @Configuration annotation
   and write a method to create Docket object using @Bean annotation
   and enable swagger using @EnableSwagger2 annotation.


3) Use Swagger annotations to provide more details about Rest API

4) Run SpringBoot application and access documentation & UI using below URLs.

http://localhost:9090/swagger-ui.html --> for UI screen

http://localhost:9090/v2/api-docs --> for documentation in json


Below are few annotations of Swagger
------------------------------------
@Api
@ApiOperation
@ApiParam
@ApiModel
@ApiModelProperty
@ApiResponses
@ApiResponse



Spring Data
-----------
Spring Data is used to develop persistent logic for our application.

This is mainely used to to perform only CURD operations.



As part of Spring Data, we have below 2 Repositories
----------------------------------------------------
1) CrudRepository (curd operations)

2) JpaRepository (curd operation + pagination + sorting)


Database Setup
---------------
We need to install below 2 softwares to work with DB operations

1) DB Server (Oracle, MySql, SqlServer, DB2 etc)

2) DB Client (SQL Developer, Toad)


-> First install Oracle Database 10g

-> Download SQL developer from Oracle website.

-> Create Connection in SQL developer using DB details.


Note: To Connect with Oracle Database we need Oracle Database Driver (OracleDriver). Oracle Driver will be available in ojdbc6.jar file.

As Oracle is Proprietary software we can't get Maven Dependency From mvnrepository.com.

To use ojdbc6.jar we have below 2 options
------------------------------------------
1) Add ojdbc6.jar file to project build path

2) Install ojdbc6.jar file to maven local repository and add local repository dependency in project pom.xml


Installing Third Party Jar to Maven Local Repository
----------------------------------------------------
1) Install Maven
2) Add MAVEN_HOME to environment variables
3) Use maven install command to install jar to local repo.

> mvn install:install-file -Dfile=ojdbc6.jar
			   -DgroupId=com.oracle
			   -DartifactId=ojdbc6
			   -Dversion=2.2.2
			   -Dpackaging=jar


Once above command is execute, ojdbc6.jar is installed to maven local repository. We can use below dependency in pom.xml to get ojdbc6.jar file to project build path.

<dependency>
   <groupId>com.oracle</groupId>
   <artifactId>ojdbc6</artifactId>
   <version>2.2.2</version>
</dependency>

Note: This dependency applicable only for the system where above command is executed.


Working with SpringData in Project
===================================
1) Add Spring Data Jpa dependency in pom.xml file

2) Add JDBC driver dependency in pom.xml

3) Configure Data Source Properties in application.properties file or application.yml file

4) Create Entity Class (mapping with database table)

5) Create Repository interface by extending from SpringData Repository

6) Inject Repository interface into service class and call methods to perform curd operations.


Methods available in CrudRepository
-----------------------------------

T save(T entity) --- polymorphic method (save and update)

Optional findById(Serializable id)

Iterable<T>  findAll( )

Iterable<T> findAllById(Iterable<Serializable> ids)

delete(T entity)

deleteById(Serializable id)

deleteAll( )

deleteAllById(Iterable<Serializable> ids)

long count()

existById(Serializable id)


Custom Queries in Spring Data
-------------------------------
We can execute Custom queries also in Spring data

Custom Queries are fail-fast

Custom queries will be compiled at the time of application startup

To write the custom queries we will use @Query annotation

Custom Queries Examples
------------------------
@Query(value = "select customerEmail from CustomerEntity")
public List<String> findAllEmails();

@Query(value = "from CustomerEntity where customerEmail=:email")
public CustomerEntity findByCustomerEmail(String email);


Application environments
-------------------------
Every applicaiton contains below environments to test properly.

Local  : Development will happen

DEV   : Developer Integration Testing

QA    : System Integration Testing

UAT   : User acceptance Testing

Pilot/Staging  : Similar to prod  to test with real data

Production : Go live

From environment to environment few properties values are going to change like DB, smtp, logging, webservices endponints etc....

In SpringBoot application we will configure below properties in application.properties file or application.yml file

1) DB Config Properties

2) ORM properties

3) SMTP properties

4) Webservice Endpoint URLs

5) Application messages


At the time of deployment changing environment specific properites everytime is difficult and time waste process. 

To avoid this problem we will maintain envrinoment specific configuration files using Profiles concept.


SpringBoot profiles
-------------------
Profiles are used to main environment specific configuration.

we will create profiles like below

application-dev.yml --> DEV profile file

application-qa.yml  --> QA profile file

application-uat.yml  --> UAT profile file

application.yml ------ base file


Note : in base yml we need to activate profile like below

spring:
  profiles:
    active: qa


Note: As per above configuration application application will load 
qa yml file.


Creating User in Oracle Database
----------------------------------
1) Connect to DB as a SysDba in SQL command line

	Open sql command line and execute below command

	Command : connect as sysdba;

	Username : dba
	password : abc

2) Execute below queries

   create user <uname> identified by <pwd>
   grant connect, resource to <uname>

3) Commit


